// interactive-mint.js

const { ethers } = require("ethers");
// Node.js ржПрж░ ржмрж┐рж▓рзНржЯ-ржЗржи 'readline' ржоржбрж┐ржЙрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж░рж╛ ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржЗржиржкрзБржЯ ржирзЗржм
const readline = require('readline/promises');

// ржХржирзНржЯрзНрж░рж╛ржХрзНржЯрзЗрж░ ABI (Application Binary Interface)
// ржПржЯрж┐ рж╕рж╛ржзрж╛рж░ржгржд ржПржХржЗ ржерж╛ржХрзЗ, рждржмрзЗ ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржЖржкржирж┐ Etherscan ржерзЗржХрзЗ ржирждрзБржи ABI ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
const contractABI = [
  // ржЙржжрж╛рж╣рж░ржг: "function mint(uint256 amount) public payable"
  // ржЖржкржирж╛ржХрзЗ ржЖрж╕рж▓ mint ржлрж╛ржВрж╢ржирзЗрж░ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред
  "function mint(uint256 numberOfTokens)"
];

// ржорзВрж▓ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржлрж╛ржВрж╢ржи
async function main() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  console.log("=== ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХрзНржЯрж┐ржн NFT ржорж┐ржирзНржЯрж┐ржВ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ===");

  // ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржЗржиржкрзБржЯ ржирзЗржУржпрж╝рж╛
  const contractAddress = await rl.question("NFT ржХржирзНржЯрзНрж░рж╛ржХрзНржЯ ржЕрзНржпрж╛ржбрзНрж░рзЗрж╕ ржкрзЗрж╕рзНржЯ ржХрж░рзБржи: ");
  const privateKey = await rl.question("ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯрзЗрж░ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржХрзА ржкрзЗрж╕рзНржЯ ржХрж░рзБржи (ржПржЯрж┐ ржХрзЛржерж╛ржУ рж╕рзЗржн рж╣ржмрзЗ ржирж╛): ");
  const quantityStr = await rl.question("ржХржпрж╝ржЯрж┐ NFT ржорж┐ржирзНржЯ ржХрж░рждрзЗ ржЪрж╛ржи? (рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи): ");
  const mintPriceStr = await rl.question("ржПржХржЯрж┐ NFT-ржПрж░ ржжрж╛ржо ETH-ржП рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 0.05): ");
  
  rl.close(); // рж╕ржорж╕рзНржд ржЗржиржкрзБржЯ ржирзЗржУржпрж╝рж╛ рж╢рзЗрж╖

  // ржЗржиржкрзБржЯржЧрзБрж▓рзЛржХрзЗ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛
  const mintQuantity = parseInt(quantityStr);
  const mintPrice = ethers.parseEther(mintPriceStr);
  const totalCost = mintPrice * BigInt(mintQuantity);

  // --- ржЖржЧрзЗрж░ рж╕рзНржХрзНрж░рж┐ржкрзНржЯрзЗрж░ ржорждрзЛ ржмрж╛ржХрж┐ ржЕржВрж╢ ---
  try {
    // рзз. ржкрзНрж░рзЛржнрж╛ржЗржбрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи (ржПржЦрж╛ржирзЗ ржПржХржЯрж┐ ржкрж╛ржмрж▓рж┐ржХ RPC ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ, ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржПржЯрж┐ржУ ржЗржиржкрзБржЯ ржирж┐рждрзЗ ржкрж╛рж░рзЗржи)
    const provider = new ethers.JsonRpcProvider("https://mainnet.infura.io/v3/YOUR_INFURA_API_KEY"); // ржЖржкржирж╛рж░ Infura/Alchemy ржХрзА ржжрж┐ржи
    console.log("\nтЬЕ Provider ржПрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕ржлрж▓ред");

    // рзи. ржУржпрж╝рж╛рж▓рзЗржЯ рж▓рзЛржб ржХрж░рж╛ (ржЗржиржкрзБржЯ ржХрж░рж╛ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржХрзА ржжрж┐ржпрж╝рзЗ)
    const wallet = new ethers.Wallet(privateKey, provider);
    console.log(`тЬЕ ржУржпрж╝рж╛рж▓рзЗржЯ рж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: ${wallet.address}`);

    // рзй. ржХржирзНржЯрзНрж░рж╛ржХрзНржЯрзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ
    const contract = new ethers.Contract(
      contractAddress,
      contractABI,
      wallet
    );
    console.log(`тЬЕ ржХржирзНржЯрзНрж░рж╛ржХрзНржЯрзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕ржлрж▓: ${await contract.getAddress()}`);

    console.log(`\nЁЯЪА ржорж┐ржирзНржЯ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржЪрж▓ржЫрзЗ...`);
    console.log(`   - ржкрж░рж┐ржорж╛ржг: ${mintQuantity}`);
    console.log(`   - ржорзЛржЯ ржЦрж░ржЪ: ${ethers.formatEther(totalCost)} ETH`);

    // рзк. ржорж┐ржирзНржЯ ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи ржкрж╛ржарж╛ржирзЛ
    const tx = await contract.mint(mintQuantity, {
      value: totalCost,
    });

    console.log(`тП│ ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред рж╣рзНржпрж╛рж╢: ${tx.hash}`);
    console.log("ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи ржирж┐рж╢рзНржЪрж┐ржд рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...");

    const receipt = await tx.wait();

    console.log("\nЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржорж┐ржирзНржЯ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ!");
    console.log(`Etherscan-ржП ржжрзЗржЦрзБржи: https://etherscan.io/tx/${receipt.hash}`);

  } catch (error) {
    console.error("\nтЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ:");
    console.error(error.reason || error.message);
  }
}

main();
